version: '3.1'

services:
  ###########
  # BACKEND #
  ###########
  backend:
    build:
      context: ./
      dockerfile: ./docker/backend/Dockerfile
    depends_on:
      - database
    volumes:
      - ./backend:/makstat # bind-mount source code
      - mvn_cache:/home/backend/.m2 # maven cache for non-root
    ports:
      - ${DC_BACKEND_TOMCAT_PORT}:8080
      - ${DC_BACKEND_DEBUG_PORT}:5005
    environment:
      # See application.properties for details
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432 # internal docker port
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_USER_PASSWORD: ${DB_USER_PASSWORD}
  ############
  # FRONTEND #
  ############
  frontend:
    build:
      context: ./
      dockerfile: ./docker/frontend/Dockerfile
    volumes:
      - ./frontend:/makstat # bind-mount source code
      - npm_cache:/home/node/.npm # npm cache for non-root
    ports:
      - ${DC_FRONTEND_PORT}:5000
    environment:
      DC_BACKEND_PORT: ${DC_BACKEND_TOMCAT_PORT}
  ############
  # DATABASE #
  ############
  database:
    build:
      context: ./
      dockerfile: ./docker/database/Dockerfile
    volumes:
      - db_data:/postgres-data
    ports:
      - ${DC_POSTGRES_PORT}:5432
    environment:
      # See Dockerfile for details
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_USER_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
  ###########
  # ADMINER #
  ###########
  adminer:
    build:
      context: ./
      dockerfile: ./docker/adminer/Dockerfile
    depends_on:
      - database
    ports:
      - ${DC_ADMINER_PORT}:8080
    environment:
      # See Dockerfile for details
      ADMINER_AUTOLOGIN: 'true'
      ADMINER_DB_SERVER: ${DB_HOST}
      ADMINER_DB_NAME: ${DB_NAME}
      ADMINER_DB_USER: ${DB_USER}
      ADMINER_DB_PASSWORD: ${DB_USER_PASSWORD}
volumes:
  db_data:
  mvn_cache:
  npm_cache:
